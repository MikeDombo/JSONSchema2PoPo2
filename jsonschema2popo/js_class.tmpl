{% macro sentence_case(text) -%}
    {{ text[0]|upper}}{{text[1:] }}
{%- endmacro -%}
{% macro jsdoc_type(prop) %}{% raw %}{{% endraw %}{% if not get_type(prop).startswith(get_type(prop, parent=False)) %}{% if namespace_path %}{{ namespace_path + "." }}{% endif %}{{ get_type(prop)[:get_type(prop).find(get_type(prop, parent=False))-1] }}~{{ get_type(prop) }}{% else %}{{ get_type(prop, module=True) }}{% endif %}{% if get_type(prop, parent=False, sub=False, module=True) == "Array" %}[]{% endif %}{% raw %}}{% endraw %}{% endmacro %}
{% macro jsdoc_param(name, prop) %}
@param {{ name }} {{ jsdoc_type(prop) }} {% if prop._comment %}{{ prop._comment | indent(7) }}{% endif %}
{% endmacro %}
{%- macro translate_type(type, module=False) -%}
{%- if type is none -%}
null
{%- elif type == "str" -%}
String
{%- elif type == "list" -%}
Array
{%- elif type == "bytes" -%}
Buffer
{%- elif type == "bool" -%}
Boolean
{%- elif type == "dict" -%}
Object
{%- elif type == "int" or type == "float" -%}
Number
{%- else -%}
{% if module and namespace_path %}{{ namespace_path + "." }}{% endif %}{{ type }}
{%- endif -%}
{%- endmacro -%}

{%- macro check_type(type, var) -%}
{%- if type == "String" -%}
typeof {{ var }} === "string"
{%- elif type == "Boolean" -%}
typeof {{ var }} === "boolean"
{%- elif type == "Number" -%}
typeof {{ var }} === "number"
{%- else -%}
{{ var }} instanceof {{ type }}
{%- endif -%}
{%- endmacro -%}

{% macro translate_bool(bool) %}
{% if bool is sameas True %}
true
{% elif bool is sameas False %}
false
{% elif bool is none %}
null
{% else %}
{{ bool }}
{% endif %}
{% endmacro %}

{% macro get_type(prop, parent=True, sub=True, module=False) -%}{{ translate_type(parent and prop._type.parent or sub and prop._type.subtype.__name__ or sub and prop._type.subtype or prop._type.type.__name__ or prop._type.type or None, module=module)-}}{%- endmacro -%}
{% macro type_check(prop, name=None) %}
{% if prop._type and prop._type.type %}
if ({{ name or prop._name }} !== null && !({{ check_type(get_type(prop, parent=prop._type.type.__name__ != "list", sub=False), name or prop._name) }})) {
    throw new Error("{{prop._name}} must be {{get_type(prop, parent=prop._type.type.__name__ != "list", sub=False)-}}");
}
{% endif %}
{% if prop._type and prop._type.type.__name__ == 'list' and prop._type.subtype %}
if ({{ name or prop._name }} !== null && !{{ name or prop._name }}.every((v) => {{ check_type(get_type(prop), "v") }})) {
    throw new Error("{{prop._name}} array values must be {{ get_type(prop)-}}");
}
{% endif %}
{% endmacro %}

{%- macro generate_class(model) -%}
/**
 * {% if model.comment %}{{ model.comment | indent(3) }}{% endif %}

 *
 * @class
{% if namespace_path %} * @memberOf {{ namespace_path }}{% endif %}

 */
class {{model.name}}{% if model.extends %} extends {{ model.extends }}{% endif %} {
{% for prop in model.properties %}
    #__{{prop._name}} = null;
{% endfor %}

{% if not model.enum %}
    /**
{% for prop in model.properties %}
     * {{ jsdoc_param(prop._name, prop) }}
{% endfor %}
     */
    constructor(
{% for prop in model.properties %}
            {{prop._name}}={{translate_bool(prop._default)}},
{% endfor %}
{% if model.extends %}
            ...superArgs
{% endif %}
            ) {
{% if model.extends %}
        super(...superArgs);
{% endif %}
{% if constructor_type_check %}
{% for prop in model.properties %}
        {{ type_check(prop)|indent(8) }}
{% endfor %}
{% endif %}
{% for prop in model.properties %}
        this.#__{{prop._name}} = {{prop._name}};
{% endfor %}
    }
{% else %}
    #value = null;
    constructor(value=null) {
        if (!Object.values({{ model.parent or model.name }}.options).includes(value)) {
            throw new Error("Value must be one of the enumerated options");
        }
        this.#value = value;
    }
{% endif %}

{% for prop in model.properties %}
    /**
{% if prop._comment %}     * {{ prop._comment | indent(7) }}
{% endif %}
     * @returns {{ jsdoc_type(prop) }}

     */
    get {{prop._name}}() {
        return this.#__{{prop._name}};
    }
    /**
     * {{ jsdoc_param("value", prop) }}
     */
    set {{prop._name}}(value) {
        {{ type_check(prop, "value")|indent(8) }}
        this.#__{{prop._name}} = value;
    }
    /**
     * {{ jsdoc_param("value", prop) }}
     * @returns {% raw %}{{% endraw %}{% if namespace_path %}{{ namespace_path + "." }}{% endif %}{% if model.parent %}{{ ".".join(model.parent.split(".")[:-1])+"~"+model.parent}}{% else %}{{ model.name }}{% endif %}{% raw %}}{% endraw %}

     */
    with{{sentence_case(prop._name)}}(value) {
        this.{{prop._name}} = value;
        return this;
    }

{% endfor %}

    static fromMap(d) {
{% if model.enum %}
        return {{ model.name }}[{{ model.name }}.optionsFlipped[d]];
{% else %}
        const ret = new {{ model.parent or model.name }}();
{% for prop in model.properties %}
        if ("{{ prop._original_name }}" in d) {
{% if prop._type.type.__name__ == 'list' %}
            ret.{{ prop._name }} = d["{{ prop._original_name }}"].reduce((acc, v) => {acc.push(Object.prototype.hasOwnProperty.call({{ get_type(prop) }}, "fromMap") ? {{ get_type(prop) }}.fromMap(v) : v); return acc;}, []);
{% else %}
            ret.{{ prop._name }} = Object.prototype.hasOwnProperty.call({{ get_type(prop) }}, "fromMap") ? {{ get_type(prop) }}.fromMap(d["{{prop._original_name}}"]) : d["{{ prop._original_name }}"];
{% endif %}
        }
{% endfor %}
        return ret;
{% endif %}
    }


    asMap() {
{% if model.enum %}
        return this.#value;
{% else %}
{% if model.extends %}
        const d = super.asMap();
{% else %}
        const d = {};
{% endif %}
{% for prop in model.properties %}
        if (this.{{prop._name}} !== null) {
{% if prop._type.type.__name__ == "list" %}
            d["{{prop._original_name}}"] = this.{{prop._name}}.reduce((acc, v) => {acc.push(Object.prototype.hasOwnProperty.call(Object.getPrototypeOf(v), "asMap") ? v.asMap() : v); return acc;}, []);
{% else %}
            d["{{prop._original_name}}"] = Object.prototype.hasOwnProperty.call(Object.getPrototypeOf(this.{{prop._name}}), "asMap") ? this.{{prop._name}}.asMap() : this.{{prop._name}};
{% endif %}
        }
{% endfor %}
        return d;
{% endif %}
    }
};
{% if model.enum %}
Object.defineProperty({{ model.parent or model.name }}, "options", {
    value: {
{% for name, value in model.enum.items() %}
    {{ name }}: {% if model.text_type == "string" %}"{{value}}"{% elif model.text_type == "integer" or model.text_type == "number" %}{{value}}{% endif %},
{% endfor %}
    }
});
Object.defineProperty({{ model.parent or model.name }}, "optionsFlipped", {
    value: {
{% for name, value in model.enum.items() %}
    {% if model.text_type == "string" %}"{{value}}"{% elif model.text_type == "integer" or model.text_type == "number" %}{{value}}{% endif %}: "{{ name }}",
{% endfor %}
    }
});

{% for name, value in model.enum.items() %}
/**
 * @member {% raw %}{{% endraw %}{% if namespace_path %}{{ namespace_path + "." }}{% endif %}{{ model.name }}{% raw %}}{% endraw %} {{ name }}
 * @memberOf {% if namespace_path %}{{ namespace_path + "." }}{% endif %}{{ model.name }}#
 * @readonly
 */
Object.defineProperty({{ model.parent or model.name }}, "{{ name }}", {
    value: new {{ model.parent or model.name }}({% if model.text_type == "string" %}"{{value}}"{% elif model.text_type == "integer" or model.text_type == "number" %}{{value}}{% endif %})
});
{% endfor %}
{% endif %}
{% for subModel in model.subModels %}

{% if model.parent %}{{ model.parent }}.{% else %}{{ model.name }}.{%endif%}{{ subModel.name }} = {{generate_class(subModel)|indent(4)}}
{% endfor %}
{% if model.properties %}

Object.defineProperty({{ model.parent or model.name }}, "typesMap", {
    value: {
{% for prop in model.properties %}
{% if get_type(prop, parent=False, sub=False) == "Array" %}
    {{prop._name}}: {'type': Array, 'subtype': {{translate_type(prop._type.parent or prop._type.subtype.__name__ or prop._type.subtype or None)}}},
{% else %}
    {{prop._name}}: {'type': {{get_type(prop, parent=True, sub=False)}}, 'subtype': null},
{% endif %}
{% endfor %}
    }
});
Object.defineProperty({{ model.parent or model.name }}, "formatsMap", {
    value: {
{% for prop in model.properties if prop._format %}
        {{prop._name}}: '{{prop._format}}',
{% endfor %}
    }
});
Object.defineProperty({{ model.parent or model.name }}, "validationsMap", {
    value: {
{% for prop in model.properties if prop._validations %}
        '{{ prop._name }}': { {% for type, value in prop._validations.items() %}'{{ type }}': {% if type == "pattern" %}/{{ value }}/{% else %}{{ translate_bool(value) }}{% endif %},{% endfor %}},
{% endfor %}
    }
});
{% endif %}

{% endmacro %}


{%- for model in models %}
{{-generate_class(model)}}

{% endfor %}

/**
 * @type {% raw %}{{{% endraw %}

{% for model in models %}
{{model.name}}: {{model.name}}{% if not loop.last %},
{% endif %}{% endfor %}

{% raw %}}}{% endraw %}

 */
module.exports = {
{%- for model in models %}
    {{model.name}},
{% endfor %}
};
