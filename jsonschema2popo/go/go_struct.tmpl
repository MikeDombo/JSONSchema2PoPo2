{% macro sentence_case(text) -%}
    {{ text[0]|upper}}{{text[1:] }}
{%- endmacro -%}
{% macro go_name(model) -%}
{{ (model.full_name_python_path()) | replace(".", "")}}
{%- endmacro -%}
{% macro translate_bool(bool) %}{% if bool is sameas True %}true{% elif bool is sameas False %}false{% elif bool is none
 %}nil{% elif bool is number %}int64({{bool}}){% else %}{{ bool }}{% endif %}{% endmacro %}

{%- macro translate_type(prop) -%}
{% if prop is string %}
{% set type = prop %}
{% elif prop.type and prop.type == "enum" %}
{% set type = python_type(prop.value_type) %}
{% elif prop.type %}
{% set type = python_type(prop) %}
{% else %}
{% set type = python_type(prop.definition) %}
{% endif %}
{%- if type is none -%}
nil
{%- elif type == "str" -%}
string
{%- elif type == "list" -%}
[]{{translate_type(python_type(prop.definition.item_type))}}
{%- elif type == "bytes" -%}
*[]byte
{%- elif type == "bool" -%}
bool
{%- elif type == "dict" -%}
map[string]interface{}
{%- elif type == "int" -%}
int64
{%- elif type == "float" -%}
float64
{%- else -%}
{{ type }}
{%- endif -%}
{%- endmacro -%}

package {{package_name}}

{% macro generate_class(model) -%}
{% if not model.type == "enum" %}
var {{go_name(model)}}Formats = map[string]string {
{% for prop in model.properties if prop.format %}
    "{{trn(prop.name)}}": "{{prop.format}}",
{% endfor %}
}
var {{go_name(model)}}Validations = map[string]map[string]interface{} {
{% for prop in model.properties if prop.validations %}
    "{{ trn(prop.name) }}": { {% for type, value in prop.validations.items() %}"{{ type }}": {% if type ==
     "pattern" %}"{{ value | replace ("\\", "\\\\") | replace("\"", "\\\"")}}"{% else %}{{ translate_bool(value) }}{%endif%},{% endfor %}},
{% endfor %}
}

{% if model.comment %}
{% for c in model.comment.split("\n") %}
// {{ c }}
{% endfor %}
{% endif %}
type {{ go_name(model) }} struct {
{% for prop in model.properties %}
    {{sentence_case(trn(prop.name))}} {{translate_type(prop) | replace(".", "")}} `json:"{{prop.name}},omitempty"`

{% endfor %}
}
{% for child in model.children %}
{{generate_class(child)}}
{% endfor %}
{% else %}
type {{ go_name(model) }} {{translate_type(model)}}

{% if model.comment %}
{% for c in model.comment.split("\n") %}
// {{ c }}
{% endfor %}
{% endif %}
var {{ go_name(model) }}Options = struct{
    {% for name, value in model.values.items() %}
        {{name}} {{ go_name(model) }}

    {% endfor %}
}{
{% for name, value in model.values.items() %}
    {{name}}: {% if model.value_type.type == "string" %}"{{value}}"{% else %}{{value}}{% endif %},

{% endfor %}

}
{% endif %}
{% endmacro %}


{%- for model in models %}
{{-generate_class(model)}}

{% endfor %}